<script src="/javascript/lib/jquery.form.js"></script> 
<script src="/javascript/my_colors.js"></script>
<script src="/javascript/lib/webcam.js"></script>

<script type="text/javascript">
  $(document).ready(function(){

      window.csrf_param = $('meta[name=csrf-param]').attr('content');
      window.csrf_token = $('meta[name=csrf-token]').attr('content');

      window.router = new MonstersApp({pushState: true, el : "#multi_view" });
      Backbone.history.start();
      });

    webcam.set_swf_url('/webcam.swf');
    webcam.set_quality(90);
    webcam.set_shutter_sound(true, '/shutter.mp3');
</script>

<div id="multi_view">
</div>

<div class="span4">
  <ul>
    <li>A Fleet has many Monsters, so Monster belongs to a Fleet.</li>
    <li>You can edit Fleets and Monsters attributes in-line, click on 'edit' and then on the attribute you want to change.</li>
    <li>When you change any attribute on a Fleet, the views on monsters should be automatically updated as well.</li>
    <li>You can only destroy Fleets that have no monsters (validation is done on client and on server).</li>
    <li>Validations for attributes are done on client first: *if they pass on client* then validates on server side.</li>
    <li style="border:2px solid red;">Client-side validation errors are highlighted in red.</li>
    <li style="border:2px solid #00ff00;">Server-side errors are highlighted in green.</li>
    <li>
      <input type="checkbox" checked="true" onchange="window.router.toggle_client_validations()"></input>
      Perform Client Validations (vs. Server validations only)
    </li>
  </ul>
</div>

<script type="text/template" id="notfound-template">
  <div class="span8">
    <h1>{= title =}</h1><a href="{= back_to =}">[back]</a>
    <div class="holding">
    </div>
  </div>
</script>

<script type="text/template" id="single-template">
  <div class="span8">
    <h1>{= title =}</h1><a href="{= back_to =}">[back]</a>
    <div class="holding">
    </div>
  </div>
</script>

<script type="text/template" id="all-monsters-template">
  <div class="span8">
    <h1>Monsters</h1><a href="#">[back]</a>
    <div class="monsters">
    </div>
    <a href="#" class="new-monster btn-primary btn-large" >New Monster</a>
  </div>
</script>

<script type="text/template" id="all-fleets-template">
  <div class="span8">
    <h1>Fleets</h1><a href="#">[back]</a>
    <div class="fleets">
    </div>
    <a href="#" class="new-fleet btn-primary btn-large" >New Fleet</a>
  </div>
</script>

<script type="text/template" id="all-template">
  <div class="span4">
    <a href="#fleets"><h1>Fleets</h1></a>
    <div class="fleets">
    </div>
    <a href="#" class="new-fleet btn-primary btn-large" >New Fleet</a>
  </div>
  <div class="span4">
    <a href="#monsters"><h1>Monsters</h1></a>
    <div class="monsters">
    </div>
    <a href="#" class="new-monster btn-primary btn-large" >New Monster</a>
  </div>
</script>

<script type="text/template" id="monster-template">
  <div class="well monster {= is_editable_class() =} {= is_new_class() =}">
    <span class="destroy">[destroy]</span>
    <span class="make-editable">{= content_editable_text() =}</span>
    <div class="editable-holder name">
      <h3 data="name" {= content_editable_helper() =} class='name editable inline'><a href="#monsters/{= model.get('id') =}">{= model.get('name') =}</a></h3>
    </div>
    <div class="editable-holder description">
      <p data="description" {= content_editable_helper() =} class='description editable'>{= model.get('description') =}</p>
    </div>
    <div class="editable-holder image">
      <div class='imageEditable' data="{= model.get('id') =}">
        <img data="image_url" src='{= image_url() =}'></img>
      </div>
    </div>
    <div class="editable-holder fleet fleet_id">
      <div class="my_fleet">
      </div>
    </div>
  </div>
</script>

<script type="text/template" id="fleet-mini-template">
  {% if(typeof(model) == 'undefined'){ %} 
    <div class="one_fleet">
      <h4>Has no fleet</h4>
    </div>
  {% } else { %}
  <div class="one_fleet fleet" style="background-color:#{= model.get('color') =}">
    <h4>Belongs to fleet:</h4>
    <img style="width:30px;height:30px;" src='{= image_url() =}'></img>
    <bold class='inline'>{= model.get('name') =}</bold>
  </div>
  {% } %}
</script>

<script type="text/template" id="fleet-multi-template">
  <h4>Select the fleet to which this moster belongs</h4>
  {% _.each(model.collection.models, function(fleet){ if(fleet.isNew())return; %}
    <div data="{= fleet.get('id') =}" class="many_fleet fleet" style="background-color:#{= fleet.get('color') =}">
      <img style="width:30px;height:30px;" src='{= image_url(fleet) =}'></img>
      <bold class='inline'>{= fleet.get('name') =}</bold>
    </div>
    {% }); %}
</script>

<script type="text/template" id="fleet-template">
  <div class="well fleet {= is_editable_class() =} {= is_new_class() =}"
    style="background-color:#{= model.get('color') =}">
    <span class="destroy">[destroy]</span>
    <span class="make-editable">{= content_editable_text() =}</span>
    <div class="editable-holder name">
      <h3 data="name" {= content_editable_helper() =} class='name editable inline'><a href="#fleets/{= model.get('id') =}">{= model.get('name') =}</a></h3>
    </div>
    <div class="editable-holder description">
      <p data="description" {= content_editable_helper() =} class='description editable'>{= model.get('description') =}</p>
    </div>
    <div class="editable-holder color">
      <p>#<strong data="color" {= content_editable_helper() =} class='color editable'>{= model.get('color') || 'abc' =}</strong></p>
    </div>
    <div class="editable-holder image">
      <div class='imageEditable' data="{= model.get('id') =}">
        <img data="image_url" src='{= image_url() =}'></img>
      </div>
    </div>
  </div>
</script>

<script type="text/template" id="file-template">
  <div class="webcam_holder"></div>
  <input class="shoot" type="button" value="Take picture"/>
  <hr/>
  <form action='/{= resources =}/{= id =}' method="post" enctype="multipart/form-data">
    <input name="_method" type="hidden" value="put">
    <input name="{= resource =}[image]" type="file">
    <input name="commit" type="submit" value="Update {= resource =}" class="btn-primary">
  </form>
</script>

<script src="/javascript/lib/underscore-1.3.3.js"></script>
<script type="text/javascript">
  _.templateSettings = {
interpolate : /\{=([\s\S]+?)=\}/g,
               evaluate : /\{%([\s\S]+?)%\}/g
  };
</script>

<script src="/javascript/lib/backbone.js"></script>
<script src="/javascript/lib/bootstrap.js"></script>
<script src="/javascript/monster_fleet.js"></script>
